
输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
  vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
    vector<vector<int> > res; vector<int> culvec;
    if (!root)
      return res;
    find_num(root, expectNumber, 0, culvec, res);
    return res;
  }
  void find_num(TreeNode* root, int expect, int cul, vector<int> &culvec, vector<vector<int>> &res) {
    culvec.push_back(root -> val);
    if (!root -> left  && !root -> right) {
      if (cul + root -> val == expect)
        res.push_back(culvec);
      culvec.pop_back();
      return;
    }
    else {
      if (root -> left)
        find_num(root -> left, expect, cul + root -> val, culvec, res);
      if (root -> right)
        find_num(root -> right, expect, cul + root -> val, culvec, res);
      culvec.pop_back();
    }
    return;
  }
};
